{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./DataSource.ts","webpack:///./ConfigEditor.tsx","webpack:///./components/FilterEntry.tsx","webpack:///./QueryEditor.tsx","webpack:///./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__545__;","module.exports = __WEBPACK_EXTERNAL_MODULE__388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { FunctionX, Installation, MyDataSourceOptions, MyQuery } from './types';\nimport { DataSourceInstanceSettings } from '@grafana/data';\nimport { BackendSrv, DataSourceWithBackend } from '@grafana/runtime';\n\nexport class DataSource extends DataSourceWithBackend<MyQuery, MyDataSourceOptions> {\n  private settings: DataSourceInstanceSettings<MyDataSourceOptions>;\n\n  constructor(instanceSettings: DataSourceInstanceSettings<MyDataSourceOptions>, private backendSrv: BackendSrv) {\n    super(instanceSettings);\n    this.settings = instanceSettings;\n  }\n\n  fetchInstallations(): Promise<Installation[]> {\n    return this.backendSrv\n      .datasourceRequest({\n        method: 'GET',\n        url: `${this.settings.url}/api/v2/installationinfo`,\n      })\n      .then(result => result.data);\n  }\n\n  fetchFunctions(installationId: number): Promise<FunctionX[]> {\n    return this.backendSrv\n      .datasourceRequest({\n        method: 'GET',\n        url: `${this.settings.url}/api/v2/functionx/${installationId}`,\n      })\n      .then(result => result.data as FunctionX[]);\n  }\n\n  testDatasource() {\n    return new Promise((resolve, reject) => {\n      this.backendSrv\n        .datasourceRequest({\n          method: 'GET',\n          url: `${this.settings.url}/api/v2/installationinfo`,\n        })\n        .then(result => {\n          resolve({ status: 'success', message: 'All good!' });\n        })\n        .catch(err => {\n          reject({ status: 'error', message: err.statusText });\n        });\n    });\n  }\n}\n","import React, { PureComponent, ChangeEvent } from 'react';\nimport { MyDataSourceOptions } from './types';\nimport { DataSourcePluginOptionsEditorProps } from '@grafana/data';\nimport { LegacyForms } from '@grafana/ui';\nconst { FormField } = LegacyForms;\n\ninterface MyProps extends DataSourcePluginOptionsEditorProps<MyDataSourceOptions> {}\n\ninterface State {}\n\nexport class ConfigEditor extends PureComponent<MyProps, State> {\n  componentDidMount() {}\n\n  onAPIKeyChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      apiKey: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  onURLChange = (event: ChangeEvent<HTMLInputElement>) => {\n    const { onOptionsChange, options } = this.props;\n    const jsonData = {\n      ...options.jsonData,\n      url: event.target.value,\n    };\n    onOptionsChange({ ...options, jsonData });\n  };\n\n  render() {\n    const { options } = this.props;\n    const { jsonData } = options;\n\n    return (\n      <div className=\"gf-form-group\">\n        <div className=\"gf-form\">\n          <FormField\n            label=\"URL\"\n            inputWidth={24}\n            labelWidth={6}\n            onChange={this.onURLChange}\n            value={jsonData.url || ''}\n            placeholder=\"https://aam.iotopen.se\"\n          />\n        </div>\n        <div className=\"gf-form\">\n          <FormField\n            label=\"API Key\"\n            inputWidth={24}\n            labelWidth={6}\n            onChange={this.onAPIKeyChange}\n            value={jsonData.apiKey || ''}\n            placeholder=\"Your API key\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import React, { PureComponent } from 'react';\nimport { Button, Select } from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\n\ntype onDeleteFunction = (idx: number) => void;\ntype onUpdateFunction = (idx: number, key: string, value: string) => void;\n\ninterface FilterEntryProps {\n  data: any;\n  idx: number;\n  onDelete: onDeleteFunction;\n  onUpdate: onUpdateFunction;\n  keys?: string[];\n  values?: string[];\n}\n\nexport class FilterEntry extends PureComponent<FilterEntryProps> {\n  constructor(props: FilterEntryProps) {\n    super(props);\n  }\n\n  shouldComponentUpdate(nextProps: Readonly<FilterEntryProps>, nextState: Readonly<{}>, nextContext: any): boolean {\n    return true;\n  }\n\n  onChangeKey = (event: any) => {\n    if (typeof event === typeof '') {\n      this.props.onUpdate(this.props.idx, event, this.props.data.value);\n    } else {\n      this.props.onUpdate(this.props.idx, event.label, this.props.data.value);\n    }\n  };\n\n  onChangeValue = (event: any) => {\n    console.log(event);\n    if (typeof event === typeof '') {\n      this.props.onUpdate(this.props.idx, this.props.data.key, event);\n    } else {\n      this.props.onUpdate(this.props.idx, this.props.data.key, event.value);\n    }\n  };\n\n  onDelete = () => {\n    this.props.onDelete(this.props.idx);\n  };\n\n  render() {\n    const keys: SelectableValue[] = [];\n    const values: SelectableValue[] = [];\n    if (this.props.keys) {\n      for (const x of this.props.keys) {\n        keys.push({ label: x, value: x });\n      }\n    }\n\n    if (this.props.values) {\n      for (const x of this.props.values) {\n        values.push({ label: x, value: x });\n      }\n    }\n\n    return (\n      <div className={'gf-form-inline'}>\n        <div className={'gf-form'}>\n          <span className={'gf-form-label query-keyword'}>key</span>\n          <Select\n            width={30}\n            options={keys}\n            onChange={this.onChangeKey}\n            onCreateOption={this.onChangeKey}\n            value={{ label: this.props.data.key, value: this.props.data.key }}\n            isSearchable={true}\n            allowCustomValue={true}\n            menuPlacement={'bottom'}\n            placeholder={'meta key'}\n          />\n          <span className={'gf-form-label query-keyword'}>match</span>\n          <Select\n            width={30}\n            options={values}\n            onChange={this.onChangeValue}\n            onCreateOption={this.onChangeValue}\n            value={{ label: this.props.data.value, value: this.props.data.value }}\n            isSearchable={true}\n            allowCustomValue={true}\n            menuPlacement={'bottom'}\n            placeholder={'wildcard match'}\n          />\n          <Button variant={'destructive'} onClick={this.onDelete}>\n            X\n          </Button>\n        </div>\n      </div>\n    );\n  }\n}\n\n//<Select width={30} options={keys} onChange={this.onChangeKey}  value={{label: this.props.data.key}} onCreateOption={this.onChangeKey} isSearchable={true} allowCustomValue={true} />\n//<span className={'gf-form-label query-keyword'}>match</span>\n//<Select width={30} options={values} onChange={this.onChangeValue} value={{label: this.props.data.value}} onCreateOption={this.onChangeValue} isSearchable={true} allowCustomValue={true} />\n\n//<Input type={'text'} style={{ width: 150 }} value={this.props.data.key} onChange={this.onChangeKey} />\n//<span className={'gf-form-label query-keyword'}>match</span>\n//<Input type={'text'} style={{ width: 150 }} value={this.props.data.value} onChange={this.onChangeValue} />\n","import React, { PureComponent, ChangeEvent } from 'react';\nimport { DataSource } from './DataSource';\nimport { MyQuery, MyDataSourceOptions, Installation, FunctionX } from './types';\nimport { FilterEntry } from './components/FilterEntry';\nimport { QueryEditorProps, SelectableValue } from '@grafana/data';\nimport { LegacyForms, Button, Select } from '@grafana/ui';\n\nconst { FormField, Switch } = LegacyForms;\n\ntype Props = QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>;\n\ninterface State {\n  installations: Installation[];\n  functions: FunctionX[];\n  ticker: any;\n  selectedInstallation: SelectableValue<Installation>;\n  loadingInstallations: boolean;\n}\n\nexport class QueryEditor extends PureComponent<Props, State> {\n  constructor(props: any) {\n    super(props);\n    this.state = {\n      installations: [],\n      functions: [],\n      selectedInstallation: { value: { id: 0, name: '', client_id: 0 } },\n      ticker: null,\n      loadingInstallations: true,\n    };\n  }\n\n  componentDidMount(): void {\n    this.props.datasource.fetchInstallations().then(installations => {\n      let selectedInstallation = { id: 0, client_id: 0, name: '' };\n      if (installations.length > 0) {\n        selectedInstallation = installations[0];\n      }\n      if (this.props.query.installationId !== 0) {\n        const tmp = installations.find(i => i.id === this.props.query.installationId);\n        if (tmp !== undefined) {\n          selectedInstallation = tmp;\n        }\n      }\n      this.onSelectInstallation({ value: selectedInstallation });\n      this.setState({\n        installations: installations,\n        loadingInstallations: false,\n        selectedInstallation: { value: selectedInstallation },\n      });\n    });\n  }\n\n  onSelectInstallation = (selected: SelectableValue<Installation>) => {\n    const { onChange, query } = this.props;\n    if (selected.value == null) {\n      return;\n    }\n    this.setState({ selectedInstallation: selected });\n    onChange({ ...query, installationId: selected.value.id, clientId: selected.value.client_id });\n    this.props.datasource.fetchFunctions(Number(selected.value.id)).then(functions => {\n      if (selected.value !== undefined) {\n        if (this.state.selectedInstallation.value === selected.value) {\n          this.setState({ functions: functions, selectedInstallation: selected });\n          this.props.onRunQuery();\n        }\n      }\n    });\n  };\n\n  addFilter = () => {\n    const { onChange, query } = this.props;\n    query.meta.push({ key: '', value: '' });\n    onChange({ ...query, meta: query.meta });\n  };\n\n  onMetaDelete = (idx: number) => {\n    const { onChange, query } = this.props;\n    query.meta = query.meta.filter((value, fidx) => {\n      return !(idx === fidx);\n    });\n    onChange({ ...query, meta: query.meta });\n    this.props.onRunQuery();\n  };\n\n  onMetaUpdate = (idx: number, key: string, value: string) => {\n    const { onChange, query } = this.props;\n    query.meta[idx].key = key;\n    query.meta[idx].value = value;\n    onChange({ ...query, meta: query.meta });\n    this.onRunQuery();\n  };\n\n  onRunQuery() {\n    if (this.state.ticker) {\n      clearTimeout(this.state.ticker);\n      const tmp = setTimeout(() => {\n        this.props.onRunQuery();\n      }, 250);\n      this.setState({ ticker: tmp });\n    } else {\n      const tmp = setTimeout(() => {\n        this.props.onRunQuery();\n      }, 250);\n      this.setState({ ticker: tmp });\n    }\n  }\n\n  onMessageChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, messageFrom: event.target.value });\n    this.onRunQuery();\n  };\n\n  onGroupByChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, groupBy: event.target.value });\n    this.onRunQuery();\n  };\n\n  onNameByChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, nameBy: event.target.value });\n    this.onRunQuery();\n  };\n\n  onLinkChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, linkKey: event.target.value });\n    this.onRunQuery();\n  };\n\n  onStateOnlyChange = (): void => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, stateOnly: !query.stateOnly });\n    this.props.onRunQuery();\n  };\n\n  onDatatable = (): void => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, tabledata: !query.tabledata });\n    this.props.onRunQuery();\n  };\n\n  onMetaAsFields = (): void => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, metaAsFields: !query.metaAsFields });\n    this.props.onRunQuery();\n  };\n\n  onDeviceMetaJoin = (): void => {\n    const { onChange, query } = this.props;\n    onChange({ ...query, joinDeviceMeta: !query.joinDeviceMeta });\n    this.props.onRunQuery();\n  };\n\n  tooltipGroupBy = (\n    <>\n      Group series by some meta key or payload <code>msg</code> field. Defaults to Function ID.\n    </>\n  );\n  tooltipNameBy = (\n    <>\n      This will name series based on some meta key.\n      <br />\n      Defaults to <code>name</code>.\n    </>\n  );\n  tooltipMessageFrom = (\n    <>\n      Using this field will join matching functions with the same filter, but the type changed to this field. The msg\n      field will be overwritten by messages matching this type, linked through <code>device_id</code> meta key. Useful\n      for eg. joining positional data. <br />\n      This field is only applied on table data.\n    </>\n  );\n\n  getInstallationOptionLabel(input: SelectableValue<Installation>): string {\n    if (input.value == null) {\n      return '';\n    }\n    return input.value.name;\n  }\n\n  getMetaKeys(): string[] {\n    const res: string[] = ['id', 'type'];\n\n    for (const func of this.state.functions) {\n      for (const metaKey in func.meta) {\n        if (res.indexOf(metaKey) === -1) {\n          res.push(metaKey);\n        }\n      }\n    }\n\n    return res;\n  }\n\n  getMetaValues(key: string): string[] {\n    const res: string[] = [];\n\n    for (const func of this.state.functions) {\n      let value = func.meta[key];\n      if (key === 'type') {\n        value = func.type;\n      }\n      if (key === 'id') {\n        value = func.id.toString();\n      }\n      if (value && res.indexOf(value) === -1) {\n        res.push(value);\n      }\n    }\n\n    return res;\n  }\n\n  render() {\n    const query = this.props.query as MyQuery;\n    if (query.meta == null) {\n      query.installationId = 0;\n      query.clientId = 0;\n      query.meta = [{ key: 'type', value: '' }];\n    }\n\n    return (\n      <div className={'section gf-form-group'}>\n        <div className={'gf-form-inline'}>\n          <Select\n            isLoading={this.state.loadingInstallations}\n            width={65}\n            getOptionLabel={this.getInstallationOptionLabel}\n            options={this.state.installations.map(installation => {\n              return { value: installation };\n            })}\n            menuPlacement={'bottom'}\n            onChange={this.onSelectInstallation}\n            value={this.state.selectedInstallation}\n          />\n        </div>\n        <div className={'gf-form-inline,ui-list'}>\n          {query.meta.map((value, idx) => {\n            return (\n              <FilterEntry\n                key={idx}\n                idx={idx}\n                data={value}\n                onDelete={this.onMetaDelete}\n                onUpdate={this.onMetaUpdate}\n                keys={this.getMetaKeys()}\n                values={this.getMetaValues(value.key)}\n              />\n            );\n          })}\n        </div>\n        <div className={'gf-form-inline'} style={{ paddingBottom: 10 }}>\n          <Button onClick={this.addFilter}>Add filter</Button>\n        </div>\n        <div className={'gf-form-inline'}>\n          <FormField\n            labelWidth={40}\n            label={'Group by'}\n            onChange={this.onGroupByChange}\n            value={query.groupBy}\n            tooltip={this.tooltipGroupBy}\n          />\n          <FormField\n            labelWidth={40}\n            label={'Name by'}\n            onChange={this.onNameByChange}\n            value={query.nameBy}\n            tooltip={this.tooltipNameBy}\n          />\n        </div>\n        <div className={'gf-form-inline'}>\n          <Switch label={'As table data'} checked={query.tabledata} onChange={this.onDatatable} />\n          <div hidden={!query.tabledata}>\n            <FormField\n              labelWidth={40}\n              label={'Message from'}\n              onChange={this.onMessageChange}\n              value={query.messageFrom}\n              tooltip={this.tooltipMessageFrom}\n            />\n            <FormField labelWidth={40} label={'Linked with'} onChange={this.onLinkChange} value={query.linkKey} />\n            <div>\n              <Switch label={'Meta to fields'} checked={query.metaAsFields} onChange={this.onMetaAsFields} />\n              <div hidden={!query.metaAsFields}>\n                <Switch label={'Add device meta'} checked={query.joinDeviceMeta} onChange={this.onDeviceMetaJoin} />\n              </div>\n            </div>\n          </div>\n        </div>\n        <Switch label={'Current state only'} checked={query.stateOnly} onChange={this.onStateOnlyChange} />\n      </div>\n    );\n  }\n}\n","import { DataSource } from './DataSource';\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor';\nimport { MyQuery, MyDataSourceOptions } from './types';\nimport { DataSourcePlugin } from '@grafana/data';\n\nexport const plugin = new DataSourcePlugin<DataSource, MyQuery, MyDataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor);\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__545__","__WEBPACK_EXTERNAL_MODULE__388__","__WEBPACK_EXTERNAL_MODULE__650__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","DataSource","DataSourceWithBackend","fetchInstallations","this","backendSrv","datasourceRequest","method","url","settings","then","result","data","fetchFunctions","installationId","testDatasource","Promise","resolve","reject","status","message","catch","err","statusText","constructor","instanceSettings","super","FormField","LegacyForms","ConfigEditor","PureComponent","componentDidMount","render","options","props","jsonData","div","className","label","inputWidth","labelWidth","onChange","onURLChange","placeholder","onAPIKeyChange","apiKey","event","onOptionsChange","target","FilterEntry","shouldComponentUpdate","nextProps","nextState","nextContext","keys","values","x","push","span","Select","width","onChangeKey","onCreateOption","isSearchable","allowCustomValue","menuPlacement","onChangeValue","Button","variant","onClick","onDelete","onUpdate","idx","console","log","Switch","QueryEditor","datasource","installations","selectedInstallation","id","client_id","name","length","query","tmp","find","i","onSelectInstallation","setState","loadingInstallations","onRunQuery","state","ticker","clearTimeout","setTimeout","getInstallationOptionLabel","input","getMetaKeys","res","func","functions","metaKey","meta","indexOf","getMetaValues","type","toString","clientId","isLoading","getOptionLabel","map","installation","onMetaDelete","onMetaUpdate","style","paddingBottom","addFilter","onGroupByChange","groupBy","tooltip","tooltipGroupBy","onNameByChange","nameBy","tooltipNameBy","checked","tabledata","onDatatable","hidden","onMessageChange","messageFrom","tooltipMessageFrom","onLinkChange","linkKey","metaAsFields","onMetaAsFields","joinDeviceMeta","onDeviceMetaJoin","stateOnly","onStateOnlyChange","selected","Number","filter","fidx","code","br","plugin","DataSourcePlugin","setConfigEditor","setQueryEditor"],"sourceRoot":""}