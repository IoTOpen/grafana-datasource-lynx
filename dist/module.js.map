{"version":3,"file":"module.js","mappings":"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","sources":["webpack://iotopen-datasource/external amd \"@grafana/data\"","webpack://iotopen-datasource/external amd \"@grafana/runtime\"","webpack://iotopen-datasource/external amd \"@grafana/ui\"","webpack://iotopen-datasource/external amd \"lodash\"","webpack://iotopen-datasource/external amd \"module\"","webpack://iotopen-datasource/external amd \"react\"","webpack://iotopen-datasource/webpack/bootstrap","webpack://iotopen-datasource/webpack/runtime/compat get default export","webpack://iotopen-datasource/webpack/runtime/define property getters","webpack://iotopen-datasource/webpack/runtime/hasOwnProperty shorthand","webpack://iotopen-datasource/webpack/runtime/make namespace object","webpack://iotopen-datasource/webpack/runtime/publicPath","webpack://iotopen-datasource/./node_modules/grafana-public-path.js","webpack://iotopen-datasource/./DataSource.ts","webpack://iotopen-datasource/./components/form/FormField.tsx","webpack://iotopen-datasource/./components/form/LabeledSwitch.tsx","webpack://iotopen-datasource/./ConfigEditor.tsx","webpack://iotopen-datasource/./types.ts","webpack://iotopen-datasource/./components/InstallationSelector.tsx","webpack://iotopen-datasource/./components/FilterEntry.tsx","webpack://iotopen-datasource/./components/MetaEditor.tsx","webpack://iotopen-datasource/./components/TweakSettings.tsx","webpack://iotopen-datasource/./components/VariableSelector.tsx","webpack://iotopen-datasource/./VariableEditor.tsx","webpack://iotopen-datasource/./module.ts","webpack://iotopen-datasource/./QueryEditor.tsx","webpack://iotopen-datasource/./components/useBackoffCallback.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__781__;","module.exports = __WEBPACK_EXTERNAL_MODULE__531__;","module.exports = __WEBPACK_EXTERNAL_MODULE__7__;","module.exports = __WEBPACK_EXTERNAL_MODULE__241__;","module.exports = __WEBPACK_EXTERNAL_MODULE__308__;","module.exports = __WEBPACK_EXTERNAL_MODULE__959__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.p = \"public/plugins/iotopen-datasource/\";","\nimport amdMetaModule from 'amd-module';\n\n__webpack_public_path__ =\n  amdMetaModule && amdMetaModule.uri\n    ? amdMetaModule.uri.slice(0, amdMetaModule.uri.lastIndexOf('/') + 1)\n    : 'public/plugins/iotopen-datasource/';\n","import {DataQueryRequest, DataQueryResponse, DataSourceInstanceSettings, MetricFindValue} from '@grafana/data';\nimport {DataSourceWithBackend, getBackendSrv, getTemplateSrv} from '@grafana/runtime';\nimport {FunctionX, Installation, MyDataSourceOptions, MyQuery, MyVariableQuery} from './types';\nimport {Observable} from 'rxjs';\nimport {toNumber} from \"lodash\";\n\nexport class DataSource extends DataSourceWithBackend<MyQuery, MyDataSourceOptions> {\n    private settings: DataSourceInstanceSettings<MyDataSourceOptions>;\n\n    constructor(instanceSettings: DataSourceInstanceSettings<MyDataSourceOptions>) {\n        super(instanceSettings);\n        this.settings = instanceSettings;\n    }\n\n    fetchInstallations(): Promise<Installation[]> {\n        return getBackendSrv()\n            .datasourceRequest({\n                method: 'GET',\n                url: `${this.settings.url}/api/v2/installationinfo`,\n            })\n            .then(result => result.data);\n    }\n\n    fetchFunctions(installationId: number, meta?: { [key: string]: string }): Promise<FunctionX[]> {\n        const q = meta ? Object.keys(meta).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(meta[key])}`).join('&') : '';\n        return getBackendSrv()\n            .datasourceRequest({\n                method: 'GET',\n                url: `${this.settings.url}/api/v2/functionx/${installationId}?${q}`,\n            })\n            .then(result => result.data as FunctionX[]);\n    }\n\n    query(options: DataQueryRequest<MyQuery>): Observable<DataQueryResponse> {\n        const templateSrv = getTemplateSrv();\n        const targets = options.targets.map(value => {\n            return {\n                ...value, installationId: value.installationVariable ? toNumber(templateSrv.replace(value.installationVariable)) : value.installationId,\n                meta: value.meta.map(meta => {\n                    return {\n                        key: templateSrv.replace(meta.key),\n                        value: templateSrv.replace(meta.value),\n                    }\n                }, value)\n            }\n        });\n        return super.query({...options, targets});\n    }\n\n    findMetaQuery(query: MyVariableQuery, options?: any): Promise<MetricFindValue[]> {\n        if (query.metaKey === '' || query.installationId === '0' || query.installationId === '') {\n            return Promise.resolve([]);\n        }\n        let id = toNumber(query.installationId);\n        if (typeof query.installationId === 'string' && query.installationId.includes('$')) {\n            const tmp = getTemplateSrv().replace(query.installationId);\n            id = toNumber(tmp);\n        }\n        if (isNaN(id)) {\n            return Promise.reject(`Invalid installation id: ${query.installationId} => ${id}`);\n        }\n        const filter = query.meta ? query.meta.reduce<{ [key: string]: string }>((acc, meta) => {\n            if (meta.key !== '' && meta.value !== '') {\n                acc[meta.key] = meta.value;\n            }\n            return acc;\n        }, {}) : {};\n\n        return this.fetchFunctions(id, filter).then(functions => {\n            return functions.reduce<MetricFindValue[]>((acc, func) => {\n                if (!acc.find(f => f.text === func.meta[query.metaKey]) && func.meta[query.metaKey]) {\n                    return [...acc, {text: func.meta[query.metaKey], value: func.meta[query.metaKey]}];\n                }\n                return acc;\n            }, []);\n        }).then(result => {\n            return result;\n        })\n    }\n\n    metricFindQuery(query: MyVariableQuery, options?: any): Promise<MetricFindValue[]> {\n        const qt = query.queryMode ? query.queryMode : 'functionMeta';\n        switch (qt) {\n            case 'installation':\n                return this.fetchInstallations().then(installations => {\n                    return installations.reduce<MetricFindValue[]>((acc, installation) => {\n                        return [...acc, {text: installation.name, value: installation.id}];\n                    }, []);\n                });\n            case 'functionMeta':\n                return this.findMetaQuery(query, options);\n            default:\n                return this.findMetaQuery(query, options);\n\n        }\n    }\n}\n","import React, {FormEventHandler, ReactElement} from 'react';\nimport {InlineField, Input} from \"@grafana/ui\";\n\nexport interface FormFieldProps {\n    label: string;\n    placeholder: string;\n    value: string;\n    name: string;\n    onChange: FormEventHandler<HTMLInputElement>;\n    tooltip?: ReactElement;\n    labelWidth?: number | \"auto\";\n    width?: number;\n    type?: string;\n}\n\nexport const FormField = ({type, tooltip, label, placeholder, name, value, onChange, labelWidth = 'auto', width}: FormFieldProps) => {\n    return(\n        <InlineField label={label} labelWidth={labelWidth} tooltip={tooltip} grow={true}>\n            <Input type={type} name={name} placeholder={placeholder} value={value} onChange={onChange}  width={width}/>\n        </InlineField>\n    )\n}\n","import React, {FormEventHandler} from \"react\";\nimport {InlineField, InlineFieldRow, InlineSwitch} from \"@grafana/ui\";\n\nexport interface LabeledSwitchProps {\n    label: string;\n    name: string;\n    value: boolean;\n    labelWidth?: number | \"auto\";\n    onChange: FormEventHandler<HTMLInputElement>;\n}\n\nexport const LabeledSwitch = ({label, value, name, onChange, labelWidth = 'auto'}: LabeledSwitchProps) => {\n    return (\n        <InlineFieldRow>\n            <InlineField label={label} labelWidth={labelWidth} >\n                <InlineSwitch value={value} name={name} onChange={onChange}/>\n            </InlineField>\n        </InlineFieldRow>\n    )\n}\n","import React, {ChangeEvent, SyntheticEvent, useEffect} from 'react';\nimport {MyDataSourceOptions, MySecureJsonData} from './types';\nimport {DataSourcePluginOptionsEditorProps} from '@grafana/data';\nimport {Alert, HorizontalGroup, VerticalGroup} from '@grafana/ui';\nimport {FormField} from 'components/form/FormField'\nimport {LabeledSwitch} from \"./components/form/LabeledSwitch\";\n\ninterface ConfigEditorProps extends DataSourcePluginOptionsEditorProps<MyDataSourceOptions, MySecureJsonData> {\n}\n\nexport const ConfigEditor = ({onOptionsChange, options}: ConfigEditorProps) => {\n    const {jsonData, secureJsonData, secureJsonFields} = options;\n    const [migrated, setMigrated] = React.useState(false);\n    const onChangeText = (event: ChangeEvent<HTMLInputElement>) => {\n        onOptionsChange({\n            ...options,\n            jsonData: {\n                ...jsonData,\n                [event.target.name]: event.target.value\n            }\n        });\n    }\n\n    const onChangeSwitch = (event: SyntheticEvent<HTMLInputElement, Event>) => {\n        onOptionsChange({\n            ...options,\n            jsonData: {\n                ...jsonData,\n                [event.currentTarget.name]: event.currentTarget.checked\n            }\n        });\n    }\n\n    const onChangeSecretText = (event: ChangeEvent<HTMLInputElement>) => {\n        onOptionsChange({\n            ...options,\n            secureJsonData: {\n                ...secureJsonData,\n                [event.target.name]: event.target.value\n            }\n        });\n    }\n\n    useEffect(() => {\n        if (options.jsonData.apiKey !== undefined && options.jsonData.apiKey !== '') {\n            setMigrated(true);\n            let newJsonData = {...jsonData};\n            delete newJsonData.apiKey;\n            onOptionsChange({\n                ...options,\n                secureJsonData: {...secureJsonData, apiKey: options.jsonData.apiKey},\n                jsonData: newJsonData\n            });\n        }\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <VerticalGroup spacing={\"none\"}>\n            <FormField label={\"URL\"}\n                       value={options.jsonData.url || ''}\n                       name={\"url\"}\n                       placeholder={\"Enter URL, eg. https://lynx.iotopen.se\"}\n                       onChange={onChangeText}\n                       labelWidth={15}\n                       width={40}\n            />\n            <LabeledSwitch labelWidth={15} label={\"OAuth2 Passthru\"} name={\"oauthPassThru\"}\n                           value={options.jsonData.oauthPassThru || false} onChange={onChangeSwitch}/>\n            {!options.jsonData.oauthPassThru &&\n                <FormField label={\"API Key\"}\n                           labelWidth={15}\n                           name={\"apiKey\"}\n                           value={secureJsonData?.apiKey ?? ''}\n                           onChange={onChangeSecretText}\n                           placeholder={secureJsonFields.apiKey ? 'Configured' : 'Enter API Key'}\n                           width={70}\n                           type={\"password\"}\n                />\n            }\n            {migrated && !secureJsonFields.apiKey &&\n                <HorizontalGroup width={\"100%\"}>\n                    <Alert title={\"Secure the API Key\"} severity={\"error\"}>\n                        <VerticalGroup>\n                            <p>\n                                The API key has migrated to a secure location. <br/>\n                                Please press save to migrate the key to the secure store and get rid of this message.\n                            </p>\n                        </VerticalGroup>\n                    </Alert>\n                </HorizontalGroup>}\n        </VerticalGroup>\n    )\n}\n","import {DataQuery, DataSourceJsonData} from '@grafana/data';\n\n\nexport interface MetaEntry {\n    key: string;\n    value: string;\n}\n\nexport interface MyVariableQuery {\n    queryMode: string;\n    installationId: string | number;\n    meta: MetaEntry[];\n    metaKey: string;\n}\n\nexport interface MyQuery extends DataQuery {\n    installationId: number;\n    installationVariable?: string;\n    type: string;\n    meta: MetaEntry[];\n    tabledata: boolean;\n    stateOnly: boolean;\n    metaAsFields: boolean;\n    joinDeviceMeta: boolean;\n    linkKey: string;\n    messageFrom: string;\n    groupBy: string;\n    nameBy: string;\n    metaAsLabels: boolean;\n}\n\n\nexport const defaultQuery: Partial<MyQuery> = {\n    installationId: 0,\n    type: '',\n    meta: [{key: 'type', value: ''}],\n};\n\nexport interface FunctionX {\n    id: number;\n    type: string;\n    meta: { [index: string]: string };\n}\n\nexport interface DeviceX {\n    id: number;\n    type: string;\n    meta: { [index: string]: string };\n}\n\nexport interface Installation {\n    id: number;\n    client_id: number;\n    name: string;\n}\n\n/**\n * These are options configured for each DataSource instance\n */\nexport interface MyDataSourceOptions extends DataSourceJsonData {\n    url?: string;\n    apiKey?: string;\n    oauthPassThru?: boolean;\n    auth?: string;\n}\n\nexport interface MySecureJsonData {\n    apiKey?: string;\n}\n","import {Installation} from \"../types\";\nimport {Select} from \"@grafana/ui\";\nimport React, {useCallback, useMemo} from \"react\";\nimport {SelectableValue} from \"@grafana/data\";\nimport {SelectValue} from \"@grafana/ui/components/Select/types\";\n\n\nexport interface InstallationSelectorProps {\n    isLoading: boolean;\n    installations: Installation[];\n    installation: Installation;\n    onSelection(installation: Installation): void;\n}\n\nexport const InstallationSelector = ({\n                                         isLoading,\n                                         installations,\n                                         installation,\n                                         onSelection\n                                     }: InstallationSelectorProps) => {\n    const installationOptions = useMemo<Array<SelectValue<Installation>>>(() => {\n        return installations.map((installation) => {\n            return {label: installation.name, value: installation};\n        });\n    }, [installations]);\n\n    const currentSelectedInstallation = useMemo<SelectValue<Installation>>(() => {\n        return {label: installation.name, value: installation};\n    }, [installation]);\n\n    const onChange = (event: SelectableValue<Installation>) => {\n        onSelection(event.value ?? installations[0]);\n    }\n\n    const filter = useCallback((option: SelectableValue<Installation>, rawInput: string) => {\n        const input = rawInput.toLowerCase();\n        return option.value?.name?.toLowerCase().includes(input) ?? false;\n    }, []);\n\n    return (\n        <div className={'gf-form-inline'}>\n            <Select\n                isLoading={isLoading}\n                placeholder={\"Installation\"}\n                noOptionsMessage={\"No available installations\"}\n                filterOption={filter}\n                width={65}\n                options={installationOptions}\n                menuPlacement={'bottom'}\n                onChange={onChange}\n                value={currentSelectedInstallation}\n            />\n        </div>\n    )\n};\n","import React, {MouseEventHandler, useCallback, useMemo} from 'react';\nimport {Button, Select} from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport {MetaEntry} from \"../types\";\n\ntype onDeleteFunction = () => void;\ntype onUpdateFunction = (event: MetaEntry) => void;\n\ninterface FilterEntryProps {\n  data: MetaEntry;\n  onDelete: onDeleteFunction;\n  onUpdate: onUpdateFunction;\n  keys?: string[];\n  values?: string[];\n}\n\n\nexport const FilterEntry = ({data, keys, values, onUpdate, onDelete}: FilterEntryProps) => {\n  const selectableKeys = useMemo<SelectableValue[]>(() => {\n    if (keys) {\n      return keys.map((value) => ({label: value, value: value}))\n    }\n    return []\n  }, [keys]);\n  const selectableValues = useMemo<SelectableValue[]>(() => {\n    if (values) {\n      return values.map((value) => ({label: value, value: value}))\n    }\n    return []\n  }, [values]);\n\n  const currentKey = useMemo<SelectableValue>(() => {\n    return {label: data.key, value: data.key}\n  }, [data]);\n\n  const currentValue = useMemo<SelectableValue>(() => {\n    return {label: data.value, value: data.value}\n  }, [data]);\n\n  const onChangeKey = useCallback((event: SelectableValue) => {\n    onUpdate({...data, key: event.value});\n  }, [data, onUpdate]);\n\n  const onChangeValue = useCallback((event: SelectableValue) => {\n    onUpdate({...data, value: event.value});\n  }, [data, onUpdate]);\n\n  const onCreateKey = useCallback((newValue: string) => {\n    onUpdate({...data, key: newValue})\n  }, [data, onUpdate]);\n\n  const onCreateValue = useCallback((newValue: string) => {\n    onUpdate({...data, value: newValue})\n  }, [data, onUpdate]);\n\n  const deleteEventHandler = useCallback<MouseEventHandler<HTMLButtonElement>>((event) => {\n    event.preventDefault();\n    onDelete();\n  }, [onDelete]);\n\n  return (\n      <div className={'gf-form-inline'}>\n        <div className={'gf-form'}>\n          <span className={'gf-form-label query-keyword'}>key</span>\n          <Select\n              width={30}\n              options={selectableKeys}\n              onChange={onChangeKey}\n              onCreateOption={onCreateKey}\n              value={currentKey}\n              isSearchable={true}\n              allowCustomValue={true}\n              menuPlacement={'bottom'}\n              placeholder={'meta key'}\n          />\n          <span className={'gf-form-label query-keyword'}>match</span>\n          <Select\n              width={30}\n              options={selectableValues}\n              onChange={onChangeValue}\n              onCreateOption={onCreateValue}\n              value={currentValue}\n              isSearchable={true}\n              allowCustomValue={true}\n              menuPlacement={'bottom'}\n              placeholder={'wildcard match'}\n          />\n          <Button variant={'destructive'} onClick={deleteEventHandler} icon={'trash-alt'} />\n        </div>\n      </div>\n  )\n};\n","import {MetaEntry} from \"../types\";\nimport {FilterEntry} from \"./FilterEntry\";\nimport React, {MouseEvent, useCallback} from \"react\";\nimport {Button, VerticalGroup} from \"@grafana/ui\";\n\n\nexport interface MetaEditorProps {\n    entries: MetaEntry[];\n    onUpdate(entries: MetaEntry[]): void;\n    hints?: {[key: string]: string[]};\n}\n\nexport const MetaEditor = ({entries: ents, onUpdate, hints}: MetaEditorProps) => {\n\n    const onMetaDelete = useCallback((idx: number) => {\n        const tmp = ents.filter((value, index) => index !== idx);\n        onUpdate(tmp);\n    }, [ents, onUpdate]);\n\n    const onMetaAdd = useCallback((e: MouseEvent) => {\n        onUpdate([...ents, {key: '', value: ''}]);\n        e.preventDefault();\n    }, [ents, onUpdate]);\n\n    const onMetaUpdate = useCallback((idx: number, value: MetaEntry) => {\n        const tmp = ents.map((entry, index) => {\n            if (index === idx) {\n                return value;\n            }\n            return entry;\n        });\n        onUpdate(tmp);\n    }, [ents, onUpdate]);\n\n    return (\n        <VerticalGroup>\n            <div className={'gf-form-inline,ui-list'}>\n                {ents.map((value, idx) => {\n                    return (\n                        <FilterEntry\n                            key={idx}\n                            data={value}\n                            onDelete={() => {onMetaDelete(idx)}}\n                            onUpdate={(value) => onMetaUpdate(idx, value)}\n                            keys={hints ? Object.keys(hints):[]}\n                            values={hints ? hints[value.key] ?? []:[]}\n                        />\n                    );\n                })}\n            </div>\n            <div className={'gf-form-inline'} style={{paddingBottom: 10}}>\n                <Button onClick={onMetaAdd} icon={'plus'}>Add filter</Button>\n            </div>\n        </VerticalGroup>\n    )\n};\n","import {MyQuery} from \"../types\";\nimport {\n    VerticalGroup,\n    HorizontalGroup,\n} from \"@grafana/ui\";\nimport React, {FormEvent} from \"react\";\nimport {LabeledSwitch} from \"./form/LabeledSwitch\";\nimport {FormField} from \"./form/FormField\";\n\nexport interface TweakSettingsProps {\n    query: MyQuery;\n\n    onChange(query: MyQuery): void;\n\n    onRunQuery(): void;\n}\n\nconst tooltipGroupBy = (\n    <>\n        Group series by some meta key or payload <code>msg</code> field. Defaults to Function ID.\n    </>\n);\nconst tooltipNameBy = (\n    <>\n        This will name series based on some meta key.\n        <br/>\n        Defaults to <code>name</code>.\n    </>\n);\nconst tooltipMessageFrom = (\n    <>\n        Using this field will join matching functions with the same filter, but the type changed to this field. The\n        msg\n        field will be overwritten by messages matching this type, linked through <code>device_id</code> meta key.\n        Useful\n        for eg. joining positional data. <br/>\n        This field is only applied on table data.\n    </>\n);\n\nexport const TweakSettings = ({query, onChange, onRunQuery}: TweakSettingsProps) => {\n\n    const onGroupByChange = (event: FormEvent<HTMLInputElement>) => {\n        onChange({...query, groupBy: event.currentTarget.value});\n        onRunQuery();\n    }\n\n    const onNameByChange = (event: FormEvent<HTMLInputElement>) => {\n        onChange({...query, nameBy: event.currentTarget.value});\n        onRunQuery();\n    }\n\n    const onMessageChange = (event: FormEvent<HTMLInputElement>) => {\n        onChange({...query, messageFrom: event.currentTarget.value});\n        onRunQuery();\n    }\n\n    const onLinkChange = (event: FormEvent<HTMLInputElement>) => {\n        onChange({...query, linkKey: event.currentTarget.value});\n        onRunQuery();\n    }\n    const onSwitchChange = (event: FormEvent<HTMLInputElement>) => {\n        onChange({...query, [event.currentTarget.name]: event.currentTarget.checked});\n        onRunQuery();\n    }\n    const onMetaAsLabelsChange= (event: FormEvent<HTMLInputElement>) => {\n        onChange({...query, [event.currentTarget.name]: event.currentTarget.checked});\n        onRunQuery();\n    }\n\n    return (\n        <>\n            <VerticalGroup spacing={\"xs\"}>\n                <FormField\n                    name={'groupBy'}\n                    labelWidth={16}\n                    label={'Group by'}\n                    onChange={onGroupByChange}\n                    value={query.groupBy}\n                    placeholder={'Function ID'}\n                    tooltip={tooltipGroupBy}\n                />\n                <FormField\n                    name={'nameBy'}\n                    labelWidth={16}\n                    label={'Name by'}\n                    placeholder={'name'}\n                    onChange={onNameByChange}\n                    value={query.nameBy}\n                    tooltip={tooltipNameBy}\n                />\n                <HorizontalGroup align={\"flex-start\"} spacing={\"xs\"}>\n                    <LabeledSwitch label={\"As table data\"} value={query.tabledata} name={\"tabledata\"}\n                                   onChange={onSwitchChange} labelWidth={16}/>\n                    {query.tabledata && <VerticalGroup spacing={\"xs\"} align={\"flex-start\"}>\n                        <FormField\n                            placeholder={'eg. latitude'}\n                            name={'messageFrom'}\n                            labelWidth={20}\n                            label={'Message from'}\n                            onChange={onMessageChange}\n                            value={query.messageFrom}\n                            tooltip={tooltipMessageFrom}\n                        />\n                        <FormField labelWidth={20} placeholder={'device_id'} name={'linkKey'} label={'Linked with'} onChange={onLinkChange}\n                                   value={query.linkKey}/>\n                        <LabeledSwitch label={\"Meta as fields\"} labelWidth={20} value={query.metaAsFields} name={\"metaAsFields\"}\n                                       onChange={onSwitchChange}/>\n                        {query.metaAsFields && <LabeledSwitch label={\"Add device meta\"} labelWidth={20} name={\"joinDeviceMeta\"}\n                                                              value={query.joinDeviceMeta} onChange={onSwitchChange}/>}\n                    </VerticalGroup>\n                    }\n                </HorizontalGroup>\n                <LabeledSwitch label={\"Current state only\"} value={query.stateOnly} name={\"stateOnly\"}\n                               onChange={onSwitchChange} labelWidth={16}/>\n                <LabeledSwitch label={\"Meta as labels\"} name={\"metaAsLabels\"} value={query.metaAsLabels}\n                               onChange={onMetaAsLabelsChange} labelWidth={16}/>\n            </VerticalGroup>\n        </>\n    )\n}\n","import {getTemplateSrv} from \"@grafana/runtime\";\nimport {Select} from \"@grafana/ui\";\nimport React from \"react\";\n\n\ntype VariableSelectorProps = {\n    value: string;\n    onSelection: (selection: string) => void;\n}\n\nexport const VariableSelector = ({value, onSelection}: VariableSelectorProps) => {\n    const templateSrv = getTemplateSrv();\n    const variables = templateSrv.getVariables();\n    const options = variables.map((variable) => {\n        return {label: variable.name, value: `$\\{${variable.name}}`};\n    });\n    return (\n        <div className={'gf-form-inline'}>\n            <Select\n                placeholder={\"Variable\"}\n                noOptionsMessage={\"No available variables\"}\n                width={65}\n                options={options}\n                menuPlacement={'bottom'}\n                onChange={(event) => onSelection(event.value ?? '')}\n                value={value}\n            />\n        </div>\n    )\n}\n","import React, {ChangeEvent, useMemo} from \"react\";\nimport {MetaEntry, MyVariableQuery} from \"./types\";\nimport {\n    HorizontalGroup,\n    InlineField,\n    InlineFieldRow,\n    RadioButtonGroup,\n    VerticalGroup\n} from \"@grafana/ui\";\nimport {FormField} from \"./components/form/FormField\";\nimport {MetaEditor} from \"./components/MetaEditor\";\n\nexport interface MyVariableEditorProps {\n    query: MyVariableQuery;\n    onChange: (query: MyVariableQuery) => void;\n}\n\nexport const VariableEditor = ({query, onChange}: MyVariableEditorProps) => {\n\n    const q = useMemo(() => {\n        if (query.queryMode === undefined || query.queryMode === '') {\n            return {...query, queryMode: 'meta', installationId: '0', meta: [], metaKey: ''};\n        }\n        return query;\n    }, [query]);\n\n    const updateMeta = (meta: MetaEntry[]) => {\n        onChange({...q, meta: meta});\n    }\n\n    const onChangeText = (event: ChangeEvent<HTMLInputElement>) => {\n        onChange({...q, [event.target.name]: event.target.value});\n    }\n\n    const queryModeOptions = [\n        {label: 'Meta values', value: 'meta'},\n        {label: 'Installations', value: 'installation'},\n    ];\n\n    return (\n        <VerticalGroup spacing={\"xs\"}>\n            <HorizontalGroup spacing={\"xs\"}>\n                <InlineFieldRow>\n                    <InlineField label={\"Query mode\"} labelWidth={15}>\n                        <RadioButtonGroup options={queryModeOptions} value={q.queryMode} onChange={(v) => {\n                            onChange({...q, queryMode: v ?? 'meta'});\n                        }}/>\n                    </InlineField>\n                </InlineFieldRow>\n            </HorizontalGroup>\n            {q.queryMode === 'meta' &&\n                <VerticalGroup>\n                    <HorizontalGroup>\n                        <FormField label={\"Installation ID\"} placeholder={\"ID\"}\n                                   value={q.installationId === undefined ? '0' : q.installationId.toString()}\n                                   name={\"installationId\"}\n                                   onChange={onChangeText} labelWidth={15}/>\n                        <FormField label={\"Meta key\"} placeholder={\"name\"} labelWidth={15} value={query.metaKey ?? ''}\n                                   name={\"metaKey\"}\n                                   onChange={onChangeText}/>\n                    </HorizontalGroup>\n                    <MetaEditor entries={q.meta ?? []} onUpdate={updateMeta}/>\n                </VerticalGroup>\n            }\n        </VerticalGroup>\n    )\n}\n","import { DataSource } from './DataSource';\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor';\nimport { MyQuery, MyDataSourceOptions } from './types';\nimport { DataSourcePlugin } from '@grafana/data';\nimport {VariableEditor} from \"./VariableEditor\";\n\nexport const plugin = new DataSourcePlugin<DataSource, MyQuery, MyDataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setVariableQueryEditor(VariableEditor);\n","import React, {useState, useEffect, useMemo, useCallback} from 'react';\nimport {DataSource} from './DataSource';\nimport {MyQuery, MyDataSourceOptions, Installation, FunctionX, MetaEntry, defaultQuery} from './types';\nimport {QueryEditorProps} from '@grafana/data';\nimport {InstallationSelector} from \"./components/InstallationSelector\";\nimport {MetaEditor} from \"./components/MetaEditor\";\nimport {TweakSettings} from \"./components/TweakSettings\";\nimport {useBackoffCallback} from \"./components/useBackoffCallback\";\nimport {LabeledSwitch} from \"./components/form/LabeledSwitch\";\nimport {InlineFieldRow} from \"@grafana/ui\";\nimport {VariableSelector} from \"./components/VariableSelector\";\n\ntype Props = QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>;\n\nexport const QueryEditor = ({onChange, query, onRunQuery, datasource}: Props) => {\n    const [installations, setInstallations] = useState<Installation[]>([])\n    const [loadingInstallations, setLoadingInstallations] = useState<boolean>(true)\n\n    const squery = useMemo(() => {\n        let q = query;\n        if (q.installationId === undefined) {\n            q = {...q, ...defaultQuery};\n            onChange(q);\n        }\n        return q;\n    }, [query, onChange])\n\n    const [functions, setFunctions] = useState<FunctionX[]>([])\n    const [loadingFunctions, setLoadingFunctions] = useState<boolean>(false)\n\n    const [selectedInstallation, setSelectedInstallation] = useState<Installation>({id: 0, name: '', client_id: 0})\n\n    const onRunQueryTimed = useBackoffCallback(onRunQuery, 250);\n\n    useEffect(() => {\n        datasource.fetchInstallations().then(installations => {\n            let tmpInstallation: Installation | undefined = installations.find(i => i.id === query.installationId);\n            if (tmpInstallation === undefined && installations.length === 0) {\n                tmpInstallation = {id: 0, name: 'No installations available', client_id: 0};\n            }\n            if (tmpInstallation === undefined && installations.length > 0) {\n                tmpInstallation = installations[0];\n            }\n            setSelectedInstallation(tmpInstallation!);\n            setInstallations(installations);\n        }).finally(() => {\n            setLoadingInstallations(false)\n        });\n    }, []); // eslint-disable-line\n\n    useEffect(() => {\n        if (selectedInstallation.id === 0) {\n            return\n        }\n        setLoadingFunctions(true);\n        datasource.fetchFunctions(Number(selectedInstallation.id)).then(functions => {\n            setFunctions(functions);\n            onRunQueryTimed();\n        }).finally(() => {\n            setLoadingFunctions(false)\n        });\n    }, [setLoadingFunctions, selectedInstallation, setFunctions, datasource, onRunQueryTimed]);\n\n    const onUpdateMeta = useCallback((entries: MetaEntry[]) => {\n        onChange({...squery, meta: entries});\n        onRunQueryTimed();\n    }, [onChange, squery, onRunQueryTimed]);\n\n    useEffect(() => {\n        if (selectedInstallation.id !== 0 &&\n            selectedInstallation.id !== squery.installationId) {\n            onChange({...squery, installationId: selectedInstallation.id});\n        }\n    }, [selectedInstallation, squery, onChange])\n\n    const hints = useMemo(() => {\n        const res: { [key: string]: string[] } = {};\n        for (const func of functions) {\n            if (res[\"type\"] === undefined) {\n                res[\"type\"] = [func.type];\n            } else {\n                if (res[\"type\"].indexOf(func.type) === -1) {\n                    res[\"type\"].push(func.type);\n                }\n            }\n            for (const metaKey in func.meta) {\n                if (res[metaKey] === undefined) {\n                    res[metaKey] = [];\n                }\n                if (res[metaKey].indexOf(func.meta[metaKey]) === -1) {\n                    res[metaKey].push(func.meta[metaKey]);\n                }\n            }\n        }\n        return res;\n    }, [functions]);\n\n    const setInstallationVariable = (variable?: string) => {\n        onChange({...squery, installationVariable: variable});\n    };\n\n    return (\n        <div className={'section gf-form-group'}>\n            <InlineFieldRow>\n                {squery.installationVariable === undefined ?\n                    <InstallationSelector isLoading={loadingInstallations || loadingFunctions}\n                                          installations={installations}\n                                          installation={selectedInstallation}\n                                          onSelection={setSelectedInstallation}/> :\n                    <VariableSelector value={squery.installationVariable} onSelection={setInstallationVariable}/>}\n                <LabeledSwitch label={\"From variable\"} name={\"useVariable\"}\n                               value={squery.installationVariable !== undefined} onChange={(e) => {\n                    if (e.currentTarget.checked) {\n                        setInstallationVariable('');\n                    } else {\n                        setInstallationVariable(undefined);\n                    }\n                }}/>\n            </InlineFieldRow>\n            <MetaEditor entries={squery.meta || []}\n                        onUpdate={onUpdateMeta}\n                        hints={hints}\n            />\n            <TweakSettings query={query} onChange={onChange} onRunQuery={onRunQueryTimed}/>\n        </div>\n    )\n};\n","import {useCallback, useRef} from \"react\";\nexport const useBackoffCallback = (fn: () => void, delay: number) => {\n    const ticker = useRef<number>();\n    return useCallback(() => {\n        if (ticker.current !== undefined) {\n            window.clearTimeout(ticker.current);\n        }\n        ticker.current = window.setTimeout(fn, delay);\n    }, [fn, delay]);\n}\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__781__","__WEBPACK_EXTERNAL_MODULE__531__","__WEBPACK_EXTERNAL_MODULE__7__","__WEBPACK_EXTERNAL_MODULE__241__","__WEBPACK_EXTERNAL_MODULE__308__","__WEBPACK_EXTERNAL_MODULE__959__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","p","slice","lastIndexOf","DataSource","DataSourceWithBackend","fetchInstallations","getBackendSrv","datasourceRequest","method","url","this","settings","then","result","data","fetchFunctions","installationId","meta","q","keys","map","encodeURIComponent","join","query","options","templateSrv","getTemplateSrv","targets","installationVariable","toNumber","replace","super","findMetaQuery","metaKey","Promise","resolve","id","includes","tmp","isNaN","reject","filter","reduce","acc","functions","func","find","f","text","metricFindQuery","queryMode","installations","installation","name","constructor","instanceSettings","FormField","type","tooltip","label","placeholder","onChange","labelWidth","width","InlineField","grow","Input","LabeledSwitch","InlineFieldRow","InlineSwitch","defaultQuery","InstallationSelector","isLoading","onSelection","installationOptions","useMemo","currentSelectedInstallation","useCallback","option","rawInput","input","toLowerCase","div","className","Select","noOptionsMessage","filterOption","menuPlacement","event","FilterEntry","values","onUpdate","onDelete","selectableKeys","selectableValues","currentKey","currentValue","onChangeKey","onChangeValue","onCreateKey","newValue","onCreateValue","deleteEventHandler","preventDefault","span","onCreateOption","isSearchable","allowCustomValue","Button","variant","onClick","icon","MetaEditor","entries","ents","hints","onMetaDelete","idx","index","onMetaAdd","e","onMetaUpdate","entry","VerticalGroup","style","paddingBottom","tooltipGroupBy","code","tooltipNameBy","br","tooltipMessageFrom","TweakSettings","onRunQuery","onSwitchChange","currentTarget","checked","spacing","groupBy","nameBy","HorizontalGroup","align","tabledata","messageFrom","linkKey","metaAsFields","joinDeviceMeta","stateOnly","metaAsLabels","VariableSelector","getVariables","variable","plugin","DataSourcePlugin","setConfigEditor","onOptionsChange","jsonData","secureJsonData","secureJsonFields","migrated","setMigrated","React","useEffect","apiKey","newJsonData","target","oauthPassThru","Alert","title","severity","setQueryEditor","datasource","setInstallations","useState","loadingInstallations","setLoadingInstallations","squery","setFunctions","loadingFunctions","setLoadingFunctions","selectedInstallation","setSelectedInstallation","client_id","onRunQueryTimed","fn","delay","ticker","useRef","current","window","clearTimeout","setTimeout","useBackoffCallback","tmpInstallation","i","length","finally","Number","onUpdateMeta","res","indexOf","push","setInstallationVariable","setVariableQueryEditor","onChangeText","RadioButtonGroup","v","toString"],"sourceRoot":""}