{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/runtime\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./DataSource.ts","webpack:///./components/form/FormField.tsx","webpack:///./components/form/LabeledSwitch.tsx","webpack:///./ConfigEditor.tsx","webpack:///./types.ts","webpack:///./components/InstallationSelector.tsx","webpack:///./components/FilterEntry.tsx","webpack:///./components/MetaEditor.tsx","webpack:///./components/TweakSettings.tsx","webpack:///./VariableEditor.tsx","webpack:///./module.ts","webpack:///./QueryEditor.tsx","webpack:///./components/useBackoffCallback.tsx"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__545__;","module.exports = __WEBPACK_EXTERNAL_MODULE__388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import {DataQueryRequest, DataQueryResponse, DataSourceInstanceSettings, MetricFindValue} from '@grafana/data';\nimport {DataSourceWithBackend, getBackendSrv, getTemplateSrv} from '@grafana/runtime';\nimport {FunctionX, Installation, MyDataSourceOptions, MyQuery, MyVariableQuery} from './types';\nimport {Observable} from 'rxjs';\n\nexport class DataSource extends DataSourceWithBackend<MyQuery, MyDataSourceOptions> {\n    private settings: DataSourceInstanceSettings<MyDataSourceOptions>;\n\n    constructor(instanceSettings: DataSourceInstanceSettings<MyDataSourceOptions>) {\n        super(instanceSettings);\n        this.settings = instanceSettings;\n    }\n\n    fetchInstallations(): Promise<Installation[]> {\n        return getBackendSrv()\n            .datasourceRequest({\n                method: 'GET',\n                url: `${this.settings.url}/api/v2/installationinfo`,\n            })\n            .then(result => result.data);\n    }\n\n    fetchFunctions(installationId: number, meta?: { [key: string]: string }): Promise<FunctionX[]> {\n        const q = meta ? Object.keys(meta).map(key => `${encodeURIComponent(key)}=${encodeURIComponent(meta[key])}`).join('&') : '';\n        return getBackendSrv()\n            .datasourceRequest({\n                method: 'GET',\n                url: `${this.settings.url}/api/v2/functionx/${installationId}?${q}`,\n            })\n            .then(result => result.data as FunctionX[]);\n    }\n\n    query(options: DataQueryRequest<MyQuery>): Observable<DataQueryResponse> {\n        const templateSrv = getTemplateSrv();\n        const targets = options.targets.map(value => {\n            return {\n                ...value, meta: value.meta.map(meta => {\n                    return {\n                        key: templateSrv.replace(meta.key),\n                        value: templateSrv.replace(meta.value),\n                    }\n                })\n            }\n        });\n        return super.query({...options, targets});\n    }\n\n    metricFindQuery(query: MyVariableQuery, options?: any): Promise<MetricFindValue[]> {\n        if (query.metaKey === '' || query.installationId === 0) {\n            return Promise.resolve([]);\n        }\n        const filter = query.meta ? query.meta.reduce<{ [key: string]: string }>((acc, meta) => {\n            if (meta.key !== '' && meta.value !== '') {\n                acc[meta.key] = meta.value;\n            }\n            return acc;\n        }, {}) : {};\n\n        return this.fetchFunctions(query.installationId, filter).then(functions => {\n            return functions.reduce<MetricFindValue[]>((acc, func) => {\n                if (!acc.find(f => f.text === func.meta[query.metaKey]) && func.meta[query.metaKey]) {\n                    return [...acc, {text: func.meta[query.metaKey], value: func.meta[query.metaKey]}];\n                }\n                return acc;\n            }, []);\n        }).then(result => {\n            return result;\n        })\n    }\n}\n","import React, {FormEventHandler, ReactElement} from 'react';\nimport {InlineField, Input} from \"@grafana/ui\";\n\nexport interface FormFieldProps {\n    label: string;\n    placeholder: string;\n    value: string;\n    name: string;\n    onChange: FormEventHandler<HTMLInputElement>;\n    tooltip?: ReactElement;\n    labelWidth?: number | \"auto\";\n    width?: number;\n    type?: string;\n}\n\nexport const FormField = ({type, tooltip, label, placeholder, name, value, onChange, labelWidth = 'auto', width}: FormFieldProps) => {\n    return(\n        <InlineField label={label} labelWidth={labelWidth} tooltip={tooltip} grow={true}>\n            <Input type={type} name={name} placeholder={placeholder} value={value} onChange={onChange}  width={width}/>\n        </InlineField>\n    )\n}\n","import React, {FormEventHandler} from \"react\";\nimport {InlineField, InlineFieldRow, InlineSwitch} from \"@grafana/ui\";\n\nexport interface LabeledSwitchProps {\n    label: string;\n    name: string;\n    value: boolean;\n    labelWidth?: number | \"auto\";\n    onChange: FormEventHandler<HTMLInputElement>;\n}\n\nexport const LabeledSwitch = ({label, value, name, onChange, labelWidth = 'auto'}: LabeledSwitchProps) => {\n    return (\n        <InlineFieldRow>\n            <InlineField label={label} labelWidth={labelWidth} >\n                <InlineSwitch value={value} name={name} onChange={onChange}/>\n            </InlineField>\n        </InlineFieldRow>\n    )\n}\n","import React, {ChangeEvent, SyntheticEvent, useEffect} from 'react';\nimport {MyDataSourceOptions, MySecureJsonData} from './types';\nimport {DataSourcePluginOptionsEditorProps} from '@grafana/data';\nimport {Alert, HorizontalGroup, VerticalGroup} from '@grafana/ui';\nimport {FormField} from 'components/form/FormField'\nimport {LabeledSwitch} from \"./components/form/LabeledSwitch\";\n\ninterface ConfigEditorProps extends DataSourcePluginOptionsEditorProps<MyDataSourceOptions, MySecureJsonData> {\n}\n\nexport const ConfigEditor = ({onOptionsChange, options}: ConfigEditorProps) => {\n    const {jsonData, secureJsonData, secureJsonFields} = options;\n    const [migrated, setMigrated] = React.useState(false);\n    const onChangeText = (event: ChangeEvent<HTMLInputElement>) => {\n        onOptionsChange({\n            ...options,\n            jsonData: {\n                ...jsonData,\n                [event.target.name]: event.target.value\n            }\n        });\n    }\n\n    const onChangeSwitch = (event: SyntheticEvent<HTMLInputElement, Event>) => {\n        onOptionsChange({\n            ...options,\n            jsonData: {\n                ...jsonData,\n                [event.currentTarget.name]: event.currentTarget.checked\n            }\n        });\n    }\n\n    const onChangeSecretText = (event: ChangeEvent<HTMLInputElement>) => {\n        onOptionsChange({\n            ...options,\n            secureJsonData: {\n                ...secureJsonData,\n                [event.target.name]: event.target.value\n            }\n        });\n    }\n\n    useEffect(() => {\n        if (options.jsonData.apiKey !== undefined && options.jsonData.apiKey !== '') {\n            setMigrated(true);\n            let newJsonData = {...jsonData};\n            delete newJsonData.apiKey;\n            onOptionsChange({\n                ...options,\n                secureJsonData: {...secureJsonData, apiKey: options.jsonData.apiKey},\n                jsonData: newJsonData\n            });\n        }\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    return (\n        <VerticalGroup spacing={\"none\"}>\n            <FormField label={\"URL\"}\n                       value={options.jsonData.url || ''}\n                       name={\"url\"}\n                       placeholder={\"https://lynx.iotopen.se\"}\n                       onChange={onChangeText}\n                       labelWidth={15}\n                       width={40}\n            />\n            <LabeledSwitch labelWidth={15} label={\"OAuth2 Passthru\"} name={\"oauthPassThru\"}\n                           value={options.jsonData.oauthPassThru || false} onChange={onChangeSwitch}/>\n            {!options.jsonData.oauthPassThru &&\n                <FormField label={\"API Key\"}\n                           labelWidth={15}\n                           name={\"apiKey\"}\n                           value={secureJsonData?.apiKey ?? ''}\n                           onChange={onChangeSecretText}\n                           placeholder={secureJsonFields.apiKey ? 'Configured' : 'Enter API Key'}\n                           width={70}\n                           type={\"password\"}\n                />\n            }\n            {migrated && !secureJsonFields.apiKey &&\n                <HorizontalGroup width={\"100%\"}>\n                    <Alert title={\"Secure the API Key\"} severity={\"error\"}>\n                        <VerticalGroup>\n                            <p>\n                                The API key has migrated to a secure location. <br/>\n                                Please press save to migrate the key to the secure store and get rid of this message.\n                            </p>\n                        </VerticalGroup>\n                    </Alert>\n                </HorizontalGroup>}\n        </VerticalGroup>\n    )\n}\n","import {DataQuery, DataSourceJsonData} from '@grafana/data';\n\n\nexport interface MetaEntry {\n    key: string;\n    value: string;\n}\n\nexport interface MyVariableQuery {\n    installationId: number;\n    meta: MetaEntry[];\n    metaKey: string;\n}\n\nexport interface MyQuery extends DataQuery {\n    installationId: number;\n    clientId: number;\n    type: string;\n    meta: MetaEntry[];\n    tabledata: boolean;\n    stateOnly: boolean;\n    metaAsFields: boolean;\n    joinDeviceMeta: boolean;\n    linkKey: string;\n    messageFrom: string;\n    groupBy: string;\n    nameBy: string;\n}\n\n\nexport const defaultQuery: Partial<MyQuery> = {\n    installationId: 0,\n    clientId: 0,\n    type: '',\n    meta: [{key: 'type', value: ''}],\n};\n\nexport interface FunctionX {\n    id: number;\n    type: string;\n    meta: { [index: string]: string };\n}\n\nexport interface DeviceX {\n    id: number;\n    type: string;\n    meta: { [index: string]: string };\n}\n\nexport interface Installation {\n    id: number;\n    client_id: number;\n    name: string;\n}\n\n/**\n * These are options configured for each DataSource instance\n */\nexport interface MyDataSourceOptions extends DataSourceJsonData {\n    url?: string;\n    apiKey?: string;\n    oauthPassThru?: boolean;\n    auth?: string;\n}\n\nexport interface MySecureJsonData {\n    apiKey?: string;\n}\n","import {Installation} from \"../types\";\nimport {Select} from \"@grafana/ui\";\nimport React, {useCallback, useMemo} from \"react\";\nimport {SelectableValue} from \"@grafana/data\";\nimport {SelectValue} from \"@grafana/ui/components/Select/types\";\n\n\nexport interface InstallationSelectorProps {\n    isLoading: boolean;\n    installations: Installation[];\n    installation: Installation;\n    onSelection(installation: Installation): void;\n\n}\n\nexport const InstallationSelector = ({isLoading, installations, installation, onSelection}: InstallationSelectorProps) => {\n    const installationOptions = useMemo<Array<SelectValue<Installation>>>(() => {\n       return installations.map((installation) => {\n              return {label: installation.name, value: installation};\n       });\n    }, [installations]);\n\n    const currentSelectedInstallation = useMemo<SelectValue<Installation>>(() => {\n        return {label: installation.name ,value: installation};\n    },[installation]);\n\n    const onChange = (event: SelectableValue<Installation>) => {\n        onSelection(event.value ?? installations[0]);\n    }\n\n    const filter = useCallback((option: SelectableValue<Installation>, rawInput: string) => {\n        const input = rawInput.toLowerCase();\n        return option.value?.name?.toLowerCase().includes(input) ?? false;\n    },[]);\n\n    return (\n        <div className={'gf-form-inline'}>\n            <Select\n                isLoading={isLoading}\n                placeholder={\"Installation\"}\n                noOptionsMessage={\"No available installations\"}\n                filterOption={filter}\n                width={65}\n                options={installationOptions}\n                menuPlacement={'bottom'}\n                onChange={onChange}\n                value={currentSelectedInstallation}\n            />\n        </div>\n    )\n};\n","import React, {useCallback, useMemo} from 'react';\nimport {Button, Select} from '@grafana/ui';\nimport { SelectableValue } from '@grafana/data';\nimport {MetaEntry} from \"../types\";\n\ntype onDeleteFunction = () => void;\ntype onUpdateFunction = (event: MetaEntry) => void;\n\ninterface FilterEntryProps {\n  data: MetaEntry;\n  onDelete: onDeleteFunction;\n  onUpdate: onUpdateFunction;\n  keys?: string[];\n  values?: string[];\n}\n\n\nexport const FilterEntry = ({data, keys, values, onUpdate, onDelete}: FilterEntryProps) => {\n  const selectableKeys = useMemo<SelectableValue[]>(() => {\n    if (keys) {\n      return keys.map((value) => ({label: value, value: value}))\n    }\n    return []\n  }, [keys]);\n  const selectableValues = useMemo<SelectableValue[]>(() => {\n    if (values) {\n      return values.map((value) => ({label: value, value: value}))\n    }\n    return []\n  }, [values]);\n\n  const currentKey = useMemo<SelectableValue>(() => {\n    return {label: data.key, value: data.key}\n  }, [data]);\n\n  const currentValue = useMemo<SelectableValue>(() => {\n    return {label: data.value, value: data.value}\n  }, [data]);\n\n  const onChangeKey = useCallback((event: SelectableValue) => {\n    onUpdate({...data, key: event.value});\n  }, [data, onUpdate]);\n\n  const onChangeValue = useCallback((event: SelectableValue) => {\n    onUpdate({...data, value: event.value});\n  }, [data, onUpdate]);\n\n  const onCreateKey = useCallback((newValue: string) => {\n    onUpdate({...data, key: newValue})\n  }, [data, onUpdate]);\n\n  const onCreateValue = useCallback((newValue: string) => {\n    onUpdate({...data, value: newValue})\n  }, [data, onUpdate]);\n\n  return (\n      <div className={'gf-form-inline'}>\n        <div className={'gf-form'}>\n          <span className={'gf-form-label query-keyword'}>key</span>\n          <Select\n              width={30}\n              options={selectableKeys}\n              onChange={onChangeKey}\n              onCreateOption={onCreateKey}\n              value={currentKey}\n              isSearchable={true}\n              allowCustomValue={true}\n              menuPlacement={'bottom'}\n              placeholder={'meta key'}\n          />\n          <span className={'gf-form-label query-keyword'}>match</span>\n          <Select\n              width={30}\n              options={selectableValues}\n              onChange={onChangeValue}\n              onCreateOption={onCreateValue}\n              value={currentValue}\n              isSearchable={true}\n              allowCustomValue={true}\n              menuPlacement={'bottom'}\n              placeholder={'wildcard match'}\n          />\n          <Button variant={'destructive'} onClick={onDelete} icon={'trash-alt'} />\n        </div>\n      </div>\n  )\n};\n","import {MetaEntry} from \"../types\";\nimport {FilterEntry} from \"./FilterEntry\";\nimport React, {useCallback} from \"react\";\nimport {Button, VerticalGroup} from \"@grafana/ui\";\n\n\nexport interface MetaEditorProps {\n    entries: MetaEntry[];\n    onUpdate(entries: MetaEntry[]): void;\n    hints?: {[key: string]: string[]};\n}\n\nexport const MetaEditor = ({entries: ents, onUpdate, hints}: MetaEditorProps) => {\n\n    const onMetaDelete = useCallback((idx: number) => {\n        const tmp = ents.filter((value, index) => index !== idx);\n        onUpdate(tmp);\n    }, [ents, onUpdate]);\n\n    const onMetaAdd = useCallback(() => {\n        onUpdate([...ents, {key: '', value: ''}]);\n    }, [ents, onUpdate]);\n\n    const onMetaUpdate = useCallback((idx: number, value: MetaEntry) => {\n        const tmp = ents.map((entry, index) => {\n            if (index === idx) {\n                return value;\n            }\n            return entry;\n        });\n        onUpdate(tmp);\n    }, [ents, onUpdate]);\n\n    return (\n        <VerticalGroup>\n            <div className={'gf-form-inline,ui-list'}>\n                {ents.map((value, idx) => {\n                    return (\n                        <FilterEntry\n                            key={idx}\n                            data={value}\n                            onDelete={() => onMetaDelete(idx)}\n                            onUpdate={(value) => onMetaUpdate(idx, value)}\n                            keys={hints ? Object.keys(hints):[]}\n                            values={hints ? hints[value.key] ?? []:[]}\n                        />\n                    );\n                })}\n            </div>\n            <div className={'gf-form-inline'} style={{paddingBottom: 10}}>\n                <Button onClick={onMetaAdd} icon={'plus'}>Add filter</Button>\n            </div>\n        </VerticalGroup>\n    )\n};\n","import {MyQuery} from \"../types\";\nimport {\n    VerticalGroup,\n    HorizontalGroup,\n} from \"@grafana/ui\";\nimport React, {FormEvent} from \"react\";\nimport {LabeledSwitch} from \"./form/LabeledSwitch\";\nimport {FormField} from \"./form/FormField\";\n\nexport interface TweakSettingsProps {\n    query: MyQuery;\n\n    onChange(query: MyQuery): void;\n\n    onRunQuery(): void;\n}\n\nconst tooltipGroupBy = (\n    <>\n        Group series by some meta key or payload <code>msg</code> field. Defaults to Function ID.\n    </>\n);\nconst tooltipNameBy = (\n    <>\n        This will name series based on some meta key.\n        <br/>\n        Defaults to <code>name</code>.\n    </>\n);\nconst tooltipMessageFrom = (\n    <>\n        Using this field will join matching functions with the same filter, but the type changed to this field. The\n        msg\n        field will be overwritten by messages matching this type, linked through <code>device_id</code> meta key.\n        Useful\n        for eg. joining positional data. <br/>\n        This field is only applied on table data.\n    </>\n);\n\nexport const TweakSettings = ({query, onChange, onRunQuery}: TweakSettingsProps) => {\n\n    const onGroupByChange = (event: FormEvent<HTMLInputElement>) => {\n        onChange({...query, groupBy: event.currentTarget.value});\n        onRunQuery();\n    }\n\n    const onNameByChange = (event: FormEvent<HTMLInputElement>) => {\n        onChange({...query, nameBy: event.currentTarget.value});\n        onRunQuery();\n    }\n\n    const onMessageChange = (event: FormEvent<HTMLInputElement>) => {\n        onChange({...query, messageFrom: event.currentTarget.value});\n        onRunQuery();\n    }\n\n    const onLinkChange = (event: FormEvent<HTMLInputElement>) => {\n        onChange({...query, linkKey: event.currentTarget.value});\n        onRunQuery();\n    }\n    const onSwitchChange = (event: FormEvent<HTMLInputElement>) => {\n        onChange({...query, [event.currentTarget.name]: event.currentTarget.checked});\n        onRunQuery();\n    }\n\n    return (\n        <>\n            <VerticalGroup spacing={\"xs\"}>\n                <FormField\n                    name={'groupBy'}\n                    labelWidth={15}\n                    label={'Group by'}\n                    onChange={onGroupByChange}\n                    value={query.groupBy}\n                    placeholder={'Function ID'}\n                    tooltip={tooltipGroupBy}\n                />\n                <FormField\n                    name={'nameBy'}\n                    labelWidth={15}\n                    label={'Name by'}\n                    placeholder={'name'}\n                    onChange={onNameByChange}\n                    value={query.nameBy}\n                    tooltip={tooltipNameBy}\n                />\n                <HorizontalGroup align={\"flex-start\"} spacing={\"xs\"}>\n                    <LabeledSwitch label={\"As table data\"} value={query.tabledata} name={\"tabledata\"}\n                                   onChange={onSwitchChange} labelWidth={15}/>\n                    {query.tabledata && <VerticalGroup spacing={\"xs\"} align={\"flex-start\"}>\n                        <FormField\n                            placeholder={'eg. latitude'}\n                            name={'messageFrom'}\n                            labelWidth={20}\n                            label={'Message from'}\n                            onChange={onMessageChange}\n                            value={query.messageFrom}\n                            tooltip={tooltipMessageFrom}\n                        />\n                        <FormField labelWidth={20} placeholder={'device_id'} name={'linkKey'} label={'Linked with'} onChange={onLinkChange}\n                                   value={query.linkKey}/>\n                        <LabeledSwitch label={\"Meta as fields\"} labelWidth={20} value={query.metaAsFields} name={\"metaAsFields\"}\n                                       onChange={onSwitchChange}/>\n                        {query.metaAsFields && <LabeledSwitch label={\"Add device meta\"} labelWidth={20} name={\"joinDeviceMeta\"}\n                                                              value={query.joinDeviceMeta} onChange={onSwitchChange}/>}\n                    </VerticalGroup>\n                    }\n                </HorizontalGroup>\n                <LabeledSwitch label={\"Current state only\"} value={query.stateOnly} name={\"stateOnly\"}\n                               onChange={onSwitchChange}/>\n            </VerticalGroup>\n        </>\n    )\n}\n","import React, {ChangeEvent, useEffect} from \"react\";\nimport {MetaEntry, MyVariableQuery} from \"./types\";\nimport {HorizontalGroup, VerticalGroup} from \"@grafana/ui\";\nimport {FormField} from \"./components/form/FormField\";\nimport {MetaEditor} from \"./components/MetaEditor\";\n\nexport interface MyVariableEditorProps {\n    query: MyVariableQuery;\n    onChange: (query: MyVariableQuery) => void;\n}\n\nexport const VariableEditor = ({query, onChange}: MyVariableEditorProps) => {\n    const onChangeNumber = (event: ChangeEvent<HTMLInputElement>) => {\n        const x = parseInt(event.target.value,10);\n        if (isNaN(x)) {\n            onChange({...query, [event.target.name]: 0});\n        } else {\n            onChange({...query, [event.target.name]: x});\n        }\n    }\n\n    useEffect(() => {\n        let q = query;\n        if (q.installationId === undefined) {\n            q = {...q, installationId: 0, meta: [], metaKey: ''};\n            onChange(q);\n        }\n    }, []); // eslint-disable-line\n\n    const updateMeta = (meta: MetaEntry[]) => {\n        onChange({...query, meta: meta});\n    }\n\n\n    const onChangeText = (event: ChangeEvent<HTMLInputElement>) => {\n        onChange({...query, [event.target.name]: event.target.value});\n    }\n\n    return (\n        <VerticalGroup spacing={\"none\"}>\n            <HorizontalGroup>\n                <FormField label={\"Installation ID\"} placeholder={\"ID\"} value={query.installationId?.toString() ?? 0}\n                           name={\"installationId\"}\n                           onChange={onChangeNumber} labelWidth={15}/>\n            </HorizontalGroup>\n            <HorizontalGroup>\n                <FormField label={\"Meta key\"} placeholder={\"name\"} labelWidth={15} value={query.metaKey ?? ''} name={\"metaKey\"}\n                           onChange={onChangeText}/>\n            </HorizontalGroup>\n            <MetaEditor entries={query.meta ?? []} onUpdate={updateMeta}/>\n        </VerticalGroup>\n    )\n}\n","import { DataSource } from './DataSource';\nimport { ConfigEditor } from './ConfigEditor';\nimport { QueryEditor } from './QueryEditor';\nimport { MyQuery, MyDataSourceOptions } from './types';\nimport { DataSourcePlugin } from '@grafana/data';\nimport {VariableEditor} from \"./VariableEditor\";\n\nexport const plugin = new DataSourcePlugin<DataSource, MyQuery, MyDataSourceOptions>(DataSource)\n  .setConfigEditor(ConfigEditor)\n  .setQueryEditor(QueryEditor)\n  .setVariableQueryEditor(VariableEditor);\n","import React, {useState, useEffect, useMemo, useCallback} from 'react';\nimport {DataSource} from './DataSource';\nimport {MyQuery, MyDataSourceOptions, Installation, FunctionX, MetaEntry, defaultQuery} from './types';\nimport {QueryEditorProps} from '@grafana/data';\nimport {InstallationSelector} from \"./components/InstallationSelector\";\nimport {MetaEditor} from \"./components/MetaEditor\";\nimport {TweakSettings} from \"./components/TweakSettings\";\nimport {useBackoffCallback} from \"./components/useBackoffCallback\";\n\ntype Props = QueryEditorProps<DataSource, MyQuery, MyDataSourceOptions>;\n\nexport const QueryEditor = ({onChange, query, onRunQuery, datasource}: Props) => {\n    const [installations, setInstallations] = useState<Installation[]>([])\n    const [loadingInstallations, setLoadingInstallations] = useState<boolean>(true)\n\n    const squery = useMemo(() => {\n        let q = query;\n        if (q.installationId === undefined) {\n            q = {...q, ...defaultQuery};\n            onChange(q);\n        }\n        return q;\n    }, [query, onChange])\n\n    const [functions, setFunctions] = useState<FunctionX[]>([])\n    const [loadingFunctions, setLoadingFunctions] = useState<boolean>(false)\n\n    const [selectedInstallation, setSelectedInstallation] = useState<Installation>({id: 0, name: '', client_id: 0})\n\n    const onRunQueryTimed = useBackoffCallback(onRunQuery, 250);\n\n    useEffect(() => {\n        datasource.fetchInstallations().then(installations => {\n            let tmpInstallation: Installation | undefined = installations.find(i => i.id === query.installationId);\n            if (tmpInstallation === undefined && installations.length === 0) {\n                tmpInstallation = {id: 0, name: 'No installations available', client_id: 0};\n            }\n            if (tmpInstallation === undefined && installations.length > 0) {\n                tmpInstallation = installations[0];\n            }\n            setSelectedInstallation(tmpInstallation!);\n            setInstallations(installations);\n        }).finally(() => {\n            setLoadingInstallations(false)\n        });\n    }, []); // eslint-disable-line\n\n    useEffect(() => {\n        if (selectedInstallation.id === 0) {\n            return\n        }\n        setLoadingFunctions(true);\n        datasource.fetchFunctions(Number(selectedInstallation.id)).then(functions => {\n            setFunctions(functions);\n            onRunQueryTimed();\n        }).finally(() => {\n            setLoadingFunctions(false)\n        });\n    }, [setLoadingFunctions, selectedInstallation, setFunctions, datasource, onRunQueryTimed]);\n\n    const onUpdateMeta = useCallback((entries: MetaEntry[]) => {\n        onChange({...squery, meta: entries});\n        onRunQueryTimed();\n    }, [onChange, squery, onRunQueryTimed]);\n\n    useEffect(() => {\n        if (selectedInstallation.id !== 0 &&\n            selectedInstallation.id !== squery.installationId &&\n            selectedInstallation.client_id !== squery.clientId) {\n            onChange({...squery, installationId: selectedInstallation.id, clientId: selectedInstallation.client_id});\n        }\n    }, [selectedInstallation, squery, onChange])\n\n    const hints = useMemo(() => {\n        const res: { [key: string]: string[] } = {};\n        for (const func of functions) {\n            if (res[\"type\"] === undefined) {\n                res[\"type\"] = [func.type];\n            } else {\n                if (res[\"type\"].indexOf(func.type) === -1) {\n                    res[\"type\"].push(func.type);\n                }\n            }\n            for (const metaKey in func.meta) {\n                if (res[metaKey] === undefined) {\n                    res[metaKey] = [];\n                }\n                if (res[metaKey].indexOf(func.meta[metaKey]) === -1) {\n                    res[metaKey].push(func.meta[metaKey]);\n                }\n            }\n        }\n        return res;\n    }, [functions]);\n\n    return (\n        <div className={'section gf-form-group'}>\n            <InstallationSelector isLoading={loadingInstallations || loadingFunctions}\n                                  installations={installations}\n                                  installation={selectedInstallation}\n                                  onSelection={setSelectedInstallation}/>\n            <MetaEditor entries={squery.meta || []}\n                        onUpdate={onUpdateMeta}\n                        hints={hints}\n            />\n            <TweakSettings query={query} onChange={onChange} onRunQuery={onRunQueryTimed}/>\n        </div>\n    )\n};\n","import {useCallback, useRef} from \"react\";\nexport const useBackoffCallback = (fn: () => void, delay: number) => {\n    const ticker = useRef<number>();\n    return useCallback(() => {\n        if (ticker.current !== undefined) {\n            window.clearTimeout(ticker.current);\n        }\n        ticker.current = window.setTimeout(fn, delay);\n    }, [fn, delay]);\n}\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__545__","__WEBPACK_EXTERNAL_MODULE__388__","__WEBPACK_EXTERNAL_MODULE__650__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","DataSource","DataSourceWithBackend","fetchInstallations","getBackendSrv","datasourceRequest","method","url","this","settings","then","result","data","fetchFunctions","installationId","meta","q","keys","map","encodeURIComponent","join","query","options","templateSrv","getTemplateSrv","targets","replace","super","metricFindQuery","metaKey","Promise","resolve","filter","reduce","acc","functions","func","find","f","text","constructor","instanceSettings","FormField","type","tooltip","label","placeholder","name","onChange","labelWidth","width","InlineField","grow","Input","LabeledSwitch","InlineFieldRow","InlineSwitch","defaultQuery","clientId","InstallationSelector","isLoading","installations","installation","onSelection","installationOptions","useMemo","currentSelectedInstallation","useCallback","option","rawInput","input","toLowerCase","includes","div","className","Select","noOptionsMessage","filterOption","menuPlacement","event","FilterEntry","values","onUpdate","onDelete","selectableKeys","selectableValues","currentKey","currentValue","onChangeKey","onChangeValue","onCreateKey","newValue","onCreateValue","span","onCreateOption","isSearchable","allowCustomValue","Button","variant","onClick","icon","MetaEditor","entries","ents","hints","onMetaDelete","idx","tmp","index","onMetaAdd","onMetaUpdate","entry","VerticalGroup","style","paddingBottom","tooltipGroupBy","code","tooltipNameBy","br","tooltipMessageFrom","TweakSettings","onRunQuery","onSwitchChange","currentTarget","checked","spacing","groupBy","nameBy","HorizontalGroup","align","tabledata","messageFrom","linkKey","metaAsFields","joinDeviceMeta","stateOnly","plugin","DataSourcePlugin","setConfigEditor","onOptionsChange","secureJsonData","jsonData","secureJsonFields","migrated","setMigrated","React","useEffect","apiKey","newJsonData","target","oauthPassThru","Alert","title","severity","p","setQueryEditor","datasource","setInstallations","useState","loadingInstallations","setLoadingInstallations","squery","setFunctions","loadingFunctions","setLoadingFunctions","selectedInstallation","setSelectedInstallation","id","client_id","onRunQueryTimed","fn","delay","ticker","useRef","current","window","clearTimeout","setTimeout","useBackoffCallback","tmpInstallation","i","length","finally","Number","onUpdateMeta","res","indexOf","push","setVariableQueryEditor","toString","x","parseInt","isNaN"],"sourceRoot":""}